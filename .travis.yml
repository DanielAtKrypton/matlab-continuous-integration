# We pretend to be C because we need GNU Octave which is not 
# available (as of December 2015)
language: java

################################################################################
cache:
  # Downloading octave takes a while, so let's cache apt
  - apt

################################################################################
# Command to install dependencies
before_install:
  # Remember the directory where our repository to test is located
  - pwd
  - REPOPATH=`pwd`
  # ----------------------------------------------------------------------------
  # Add repository for octave
  - sudo add-apt-repository -y ppa:octave/stable
  # Add repository for g++-4.8
  - sudo add-apt-repository -y ppa:ubuntu-toolchain-r/test
  # Update apt-get to include the contents from the new locations
  - sudo apt-get update -qq
  # Install octave with apt-get
  - sudo apt-get install -y octave liboctave-dev
  # Add a C++11 compiler so we can install image package
  - sudo apt-get install gcc-4.8 g++-4.8
  - sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-4.8 50
  - sudo update-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-4.8 50
  - which g++
  - g++ --version
  - which gcc
  - gcc --version
  # ----------------------------------------------------------------------------
  # Go up one level and retrieve MOxUnit from its repository
  - cd ..
  - git clone https://github.com/MOxUnit/MOxUnit.git
  # Install MOxUnit, which adds itself to the startup path
  - make -C MOxUnit install
  # Go back to the repository directory
  - cd ${REPOPATH}

################################################################################
install:
  # Install requirements from Forge
  # Add them to .octaverc so they are always loaded on launch
  - touch ~/.octaverc
  - while read PN; do
      echo "Installing $PN from Octave Forge";
      octave -q --eval "pkg install -forge $PN";
      echo "pkg load $PN;" >> ~/.octaverc;
    done < requirements.txt

################################################################################
after_install:
  # Double-check we are still in the right directory
  - pwd
  # Check what octave packages we have installed
  - /usr/bin/octave -q --eval "ver"

################################################################################
before_script:
  # Set up folders for test results
  - if [ "$SHIPPABLE" = "true" ]; then
      mkdir -p shippable/testresults;
      mkdir -p shippable/codecoverage;
    fi;

################################################################################
script:
  - /usr/bin/octave -q --eval "exit(~runAllTests)"

################################################################################
after_script:
  # Check where we ended up and what's going on where we are
  - pwd
  - ls -alh
  # ----------------------------------------------------------------------------
  # Move results and coverage files into appropriate places
  - if [ "$SHIPPABLE" = "true" ] && [ -f testresults.xml ]; then
      mv testresults.xml shippable/testresults/;
    fi;
  - if [ "$SHIPPABLE" = "true" ] && [ -f coverage.xml ]; then
      mv coverage.xml shippable/codecoverage/;
    fi;
